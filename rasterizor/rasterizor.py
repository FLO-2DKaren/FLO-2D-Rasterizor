# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FLO-2D Rasterizor
                                 A QGIS plugin
 A plugin to rasterize general FLO-2D ouptut files.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Karen OBrien
        email                : karen@flo-2d.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import pandas as pd
import numpy as np
from numpy import savetxt
from qgis.core import (
    Qgis,
    QgsMessageLog,
    QgsCoordinateReferenceSystem,
)
from qgis.utils import iface
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import (
    QAction,
    QWidget,
    QSizePolicy,
    QPushButton,
    QDialog,
    QGridLayout,
    QDialogButtonBox,
    QMessageBox
)
# from rast_functions import outTable

# Initialize Qt resources from file resources.py
from . import xyz2tif
from .resources import *
# Import the code for the dialog
from .rasterizor_dialog import RasterizorDialog
import os.path
from qgis import processing
from rasterio import transform as riotrans
import rasterio as rio

class Rasterizor:
    """QGIS Plugin Implementation."""

    

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        
        
        self.dlg = RasterizorDialog()
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FLO-2DRasterizor_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&FLO-2D Rasterizor')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        
        # Set the CRS to the widget
        self.crs = QgsCoordinateReferenceSystem("EPSG:4326")
        self.dlg.crsselector.setCrs(self.crs)
        
        # Run button
        self.dlg.runButton.clicked.connect(self.run)
        
        # Close button
        self.dlg.cancelButton.clicked.connect(self.closeDialog)     

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FLO-2DRasterizor', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/rasterizor/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'FLO-2D Rasterizor'),
            callback=self.open,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&FLO-2D Rasterizor'),
                action)
            self.iface.removeToolBarIcon(action)
            
    # Closing the dialog
    def closeDialog(self):
        self.dlg.close()

    # Opening the dialog
    def open(self):
        self.dlg.show()
        
    def xyz2matrix(self, xyz: pd.DataFrame):
        """
        Converts the xyz dataframe to a 2d numpy array with origin and bounding box
        """
        mat = xyz.pivot_table(index='y', columns='x', values='z')
        mat.sort_index(axis='index', ascending=False, inplace=True)
        mat.sort_index(axis='columns', ascending=True, inplace=True)
        # Get origin (upper left corner)
        cellsize_x = mat.columns[1] - mat.columns[0]
        self.dlg.plainTextEdit.appendPlainText("Cell size x: " + str(cellsize_x))
        cellsize_y = mat.index[0] - mat.index[1]
        self.dlg.plainTextEdit.appendPlainText("Cell size y: " + str(cellsize_y))
        south = mat.index.min() - cellsize_y / 2
        north = mat.index.max() + cellsize_y / 2
        west = mat.columns.min() - cellsize_x / 2
        east = mat.columns.max() + cellsize_x / 2

        arr = np.asarray(mat, dtype=np.float32)

        return arr, west, south, east, north
    
    def matrix2raster(self, fn_out: str, arr: np.ndarray, west: float, south: float, east: float, north: float):
            
        transform = riotrans.from_bounds(
            west=west, south=south,
            east=east, north=north,
            width=arr.shape[1],
            height=arr.shape[0]
        )
            
            
        with rio.open(
                fn_out, 'w',
                driver='GTiff',
                height=arr.shape[0], width=arr.shape[1],
                count=1, dtype=str(arr.dtype),
                crs=self.dlg.crsselector.crs().authid(), transform=transform, compress='lzw'
        ) as raster:
            
            raster.write(arr, 1)
    
        
    def process(self, fn_in, fn_out):
        xyz = fn_in
        self.dlg.plainTextEdit.appendPlainText("Processing data...")
        arr, west, south, east, north = self.xyz2matrix(xyz)
        # adjusted here
        self.dlg.plainTextEdit.appendPlainText("Rasterizing data...")
        fn_out = fn_out + "\output.tif"
        self.matrix2raster(fn_out, arr, west, south, east, north)
        return fn_out
                    
    def run(self):

        # # Create the dialog with elements (after translation) and keep reference
        # # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        # if self.first_start == True:
        #     self.first_start = False
        #     self.dlg = RasterizorDialog()

        filePath = self.dlg.readfile.filePath()
        # crs = os.path.basename(filePath)[:-4][-4:]
        # self.dlg.plainTextEdit.appendPlainText(crs)
        # self.dlg.crsselector.setCrs(crs)
        outputPath = self.dlg.outputFile.filePath()
        if filePath == "" or outputPath =="":
            QMessageBox.information(None, "Error", "Please, select a file and/or output directory!") 
        else:
            
            # """Load FLO-2D *.OUT file into xyz2tif python script.  Run the script and add the raster to the map."""
            
            f = self.dlg.readfile.filePath()
            fn = f.replace(os.sep, '/')
            #iface.messageBar().pushMessage("This is the corrected file path.", fn, level=Qgis.Info, duration=5)
            self.dlg.plainTextEdit.appendPlainText("Reading data...")
            table = pd.read_table(fn, names='g x y z'.split(), sep=r'\s+', index_col=0)
            # table = table.to_csv(index=None)
            # self.dlg.plainTextEdit.appendPlainText(table)
            
            # epsg = self.dlg.crsselector.crs().authid()
            #iface.messageBar().pushMessage("File", fn, level=Qgis.Info)
            #processing.run("native:rasterize", )
             
            raster_file = self.process(table, outputPath)
            self.dlg.plainTextEdit.appendPlainText("Processing complete!")
            
            # Add the output file to the map canvas
            self.iface.addRasterLayer(raster_file,"FLO-2D-Rasterizor")
                      
            
